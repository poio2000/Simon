//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Simon.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Simon : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Simon()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Simon"",
    ""maps"": [
        {
            ""name"": ""Raycast"",
            ""id"": ""49aa5c10-beb3-4b3d-b988-21bf7a8766a8"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""645184c6-0225-4f75-ab3a-e7313199d6db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""2f814faf-475f-47c4-8973-4cf6cd7ed139"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e648bf35-e953-4baf-910f-c43fcc57ac8a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd9f7ada-96fc-4490-b3cc-ca4e860d20d6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Raycast
        m_Raycast = asset.FindActionMap("Raycast", throwIfNotFound: true);
        m_Raycast_Click = m_Raycast.FindAction("Click", throwIfNotFound: true);
        m_Raycast_MousePosition = m_Raycast.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Raycast
    private readonly InputActionMap m_Raycast;
    private IRaycastActions m_RaycastActionsCallbackInterface;
    private readonly InputAction m_Raycast_Click;
    private readonly InputAction m_Raycast_MousePosition;
    public struct RaycastActions
    {
        private @Simon m_Wrapper;
        public RaycastActions(@Simon wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Raycast_Click;
        public InputAction @MousePosition => m_Wrapper.m_Raycast_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Raycast; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RaycastActions set) { return set.Get(); }
        public void SetCallbacks(IRaycastActions instance)
        {
            if (m_Wrapper.m_RaycastActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_RaycastActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_RaycastActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_RaycastActionsCallbackInterface.OnClick;
                @MousePosition.started -= m_Wrapper.m_RaycastActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_RaycastActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_RaycastActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_RaycastActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public RaycastActions @Raycast => new RaycastActions(this);
    public interface IRaycastActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
